NOTE: parallelization is at question-level
In this algorithm, as the weight for entropy summation we calculate Pr(q[i]==k | Q(S-1)) as the sum over all
  targets j of Pr(q[i]==k | t[j]) * Pr(t[j] | Q(S-1)) , because when A is a subset of B and B is a subset of C,
  the following holds true: P(A|C) = P (A|B) * P(B|C) : https://math.stackexchange.com/a/2399444/187933 . In our
  case A is the set of question answering events. B is the set of target selection events. C is the set of
  interrogation events. Different interrogations may lead to the same target. Different targets may lead to the
  same question answered with a specific option. I'm not sure though that subset A <= B <= C inclusion holds,
  so there is an opportunity to proove/disproove this, thus perhaps the quality of question selection can be
  improved by simply using Pr(q[i]=k) as the weight, or by keeping a second space of Pr(q[j1]==k1 | q[j2]==k2),
  and applying Naive Bayes assumption again to the formula
  Pr(q[i]=k | Q(S-1)) = Pr(Q(S-1) | q[i]==k) * Pr(q[i]==k) / Pr(Q(S-1)) , where the latter is not calculated, but
  rather likelihood Pr(Q(S-1) | q[i]==k) * Pr(q[i]==k) is divided by the sum of likelihoods over all k.
Q(S-1) is the interrogation (the set of questions answered with specific options) as it was before applying the
  current candidate question.
By design, Pr(q[i]==k | Q(S-1)) = Pr(Q(S) | Q(S-1)) .
// TODO: log() seems 1.77 times faster than log2(), so consider using it for entropy calculation, then exp(avgH)
//   instead of pow(2, avgH).

Normalize priors in the quiz so to avoid normalization after each (question,answer) pair application
  Find the maximum double+int64_t parts of the exponent of the prior among targets not in gaps
    (in parallel and vectorized).
    For a gap, assume a large negative number as the exponent
  For each target j in parallel with SIMD:
    Just skip if it's a gap
    Adjust the double part of the prior so that the maximum gets exponent about 950
    Put the adjusted double to a bucket by exponent
  Sum the numbers in the buckets in parallel with SIMD
  Divide target likelihood values by their sum, so to get the probabilities
Calculate M1 as the number of targets without gaps
In parallel for each question i, if this question has not been already asked
  If this question is in a gap, skip it.
  For each answer k
    For each target j
      If the target is not in a gap:
        In a separate array, SIMD-multiply target probability by Pr(q[i]==k | t[j]) = _sA[i][k][j] / _mD[i][j].
        Store the product in a bucket by exponent.
    Get W[k] as the sum of the likelihoods array by summing starting with the smallest exponent.
    For each target j
      SIMD-divide j-th item in the likelihoods array by W[k] so to get the probability Pr(j)
      If target j is not in a gap:
        Calculate entropy component H(i,k,j)=-Pr(j)*log2(Pr(j)) substituting 0 for Pr(j)==0, and store H(i,k,j) in
          a bucket by exponent. Here -log2(Pr(j)) part is the self-information content.
    Calculate entropy H(i,k) as the sum in buckets where H(i,k,j) are stored.
  Calculate totW as the sum of W[k] over all k, after sorting W[k] so to minimize error, (using SIMD?)
  If totW is not close enough to 1.0:
    Log a warning specifying the total totW.
  For all k, using SIMD
    Normalize W[k] by dividing by their total totW
  Calculate avgH(i) as the sum over all k of H(i,k)*W[k]
  // We must prefer minimum entropy, so the code below subtracts pow(2, avgH(i)), which is the number of targets
  //   seen according to the entropy, from the actual number of targets without gaps M1, and adds 1 so to give
  //   some probability even to questions which lead to equal probabilities of targets (i.e. where the entropy
  //   reaches its maximum log2(M1).
  Store (1 + M1 - pow(2, avgH(i))) plus the previous run-length (accumulated sum) in this thread's piece of
    run-length array.
Calculate totG as the total over all threads of the last item in the run-length array, and create another
  run-length array, where each item is a grand total over totals from different threads.
Generate a uniformly-distributed random number rSel between 0 and totG.
Binary search over grand totals to find the thread-specific piece of run-length, and subtract the total from
  the previous thread from rSel so to get rSubSel
Binary search for rSubSel in the thread-specific run-length array so to find the index of the question to ask.